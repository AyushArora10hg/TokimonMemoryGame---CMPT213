package cmpt213.asn4.memorygame.game;

import java.util.Random;

/**
 * @author Ayush Arora
 * @version 2.1 <br><br>
 * <p>
 * The {@link GameBoard} class represents the 4 x 4 grid of the <b>Memory Game</b>. It has a private
 * integer-type double array {@code gameBoard} that randomly stores integers 1-8; with a count of 2 each,
 * representing a matching pair. <br>
 * {@code GameBoard()}: The constructor populates the array with random numbers from 1-8 generated by
 * the java.util. <b>Random</b> class, with a count of 2 each. <br>
 * {@code getValue}: This method takes two int arguments representing rows and columns respectively. It returns
 * the value stored in the 2-D array {@code gameBoard} at the corresponding position. <br>
 * {@code canInsert()} is a helper method that takes an integer argument and returns false if that value
 * has already been added in the <b>gameBoard</b> twice. It helps to maintain the count of each number in
 * the double array to 2.<br>
 * {@code shuffle()} : This method shuffles the 2-D array by creating a new randomly generated array and
 * copying its values to the original one.
 */

public class GameBoard {

    public final int[][] gameBoard = new int[4][4];

    // Constructor
    public GameBoard() {

        Random rand = new Random();
        int nextNum;
        int count = 0;
        int row = 0;
        int col = 0;

        while (count < 16) {

            nextNum = rand.nextInt(8) + 1;
            if (this.canInsert(nextNum)) {
                gameBoard[row][col] = nextNum;
                count++;
                col++;
                if (col == 4) {
                    col = 0;
                    row++;
                }
            }
        }
    }

    // Getter
    public int getValue(int row, int col) {

        return gameBoard[row][col];
    }

    // Helper functions
    private boolean canInsert(int num) {

        int count = 0;

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                if (gameBoard[i][j] == num) {
                    count++;
                }
            }
        }
        return count <= 1;
    }

    // Reset
    public void shuffle() {

        GameBoard temp = new GameBoard();
        for (int i = 0; i < 4; i++) {
            System.arraycopy(temp.gameBoard[i], 0, gameBoard[i], 0, 4);
        }
    }

    public void printBoard() {
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(gameBoard[i][j] + " ");
            }
            System.out.println();
        }
    }

}
